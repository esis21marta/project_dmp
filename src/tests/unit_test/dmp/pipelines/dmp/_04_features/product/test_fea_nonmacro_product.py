# Copyright 2018-present QuantumBlack Visual Analytics Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND
# NONINFRINGEMENT. IN NO EVENT WILL THE LICENSOR OR OTHER CONTRIBUTORS
# BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF, OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# The QuantumBlack Visual Analytics Limited ("QuantumBlack") name and logo
# (either separately or in combination, "QuantumBlack Trademarks") are
# trademarks of QuantumBlack. The License does not grant you any right or
# license to the QuantumBlack Trademarks. You may not use the QuantumBlack
# Trademarks or any confusingly similar mark as a trademark for your product,
#     or use the QuantumBlack Trademarks in any other manner that might cause
# confusion in the marketplace, including but not limited to in advertising,
# on websites, or on software.
#
# See the License for the specific language governing permissions and
# limitations under the License.

import datetime
from unittest import mock

from pyspark.sql import Row, SparkSession

from src.dmp.pipelines.dmp._04_features.product.fea_nonmacro_product import (
    fea_nonmacro_product,
)
from src.tests.pysaprk_df_equality import assert_df_frame_equal


@mock.patch(
    "src.dmp.pipelines.dmp._04_features.product.fea_nonmacro_product.get_start_date",
    return_value=datetime.date(2018, 10, 10),
    autospec=True,
)
@mock.patch(
    "src.dmp.pipelines.dmp._04_features.product.fea_nonmacro_product.get_end_date",
    return_value=datetime.date(2020, 10, 10),
    autospec=True,
)
class TestFeatureNonMacroProduct:
    def test_fea_nonmacro_product(
        self, mock_get_start_date, mock_get_end_date, spark_session: SparkSession
    ):
        sc = spark_session.sparkContext

        df_nonmacro_product_weekly = sc.parallelize(
            [
                # Case A) Sanity test - full value without 0
                [
                    "111",
                    "2019-10-14",
                    100,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                ],
                # Case B) Sanity test - full value with 0 week
                [
                    "222",
                    "2019-10-07",
                    100,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                ],
                [
                    "222",
                    "2019-10-14",
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                # Case C) Edge case - three weeks with null first week
                [
                    "333",
                    "2019-10-07",
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                    None,
                ],
                [
                    "333",
                    "2019-10-14",
                    100,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                ],
                [
                    "333",
                    "2019-10-28",
                    100,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                ],
            ]
        )

        df_nonmacro_product_weekly = spark_session.createDataFrame(
            df_nonmacro_product_weekly.map(
                lambda x: Row(
                    msisdn=x[0],
                    weekstart=x[1],
                    revenue=x[2],
                    tcash_balance=x[3],
                    voice_offnet=x[4],
                    voice_allnet=x[5],
                    voice_allopr=x[6],
                    voice_onnet_malam=x[7],
                    voice_onnet_siang=x[8],
                    voice_roaming_mo=x[9],
                    voice_onnet=x[10],
                    voice_idd=x[11],
                    voice_roaming=x[12],
                    data_games=x[13],
                    data_video=x[14],
                    data_dpi=x[15],
                    data_4g_omg=x[16],
                    data_wifi=x[17],
                    data_roaming=x[18],
                    data_allnet=x[19],
                    data_4g_mds=x[20],
                    data_allnet_local=x[21],
                    unlimited_data=x[22],
                    data_allnet_siang=x[23],
                    data_music=x[24],
                    fg_data_pool=x[25],
                    data_onnet=x[26],
                    data_4g=x[27],
                    data_mds=x[28],
                    sms_allnet=x[29],
                    sms_allopr=x[30],
                    sms_offnet=x[31],
                    sms_roaming=x[32],
                    sms_onnet=x[33],
                    sms_onnet_siang=x[34],
                    subscription_tribe=x[35],
                    subscription_hooq=x[36],
                    subscription_viu=x[37],
                    subscription_bein=x[38],
                    subscription_music=x[39],
                    monbal_monbal=x[40],
                    monbal_siang=x[41],
                    monbal_onnet=x[42],
                )
            )
        )

        actual_result_df = fea_nonmacro_product(
            df_nonmacro_product_weekly, feature_mode="all", required_output_features=[]
        )

        expected_result_df = spark_session.read.parquet(
            "src/tests/unit_test/dmp/pipelines/dmp/_04_features/product/fea_non_macro_product.parquet"
        )

        assert_df_frame_equal(actual_result_df, expected_result_df, order_by=["msisdn"])
