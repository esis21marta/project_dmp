# Copyright 2018-present QuantumBlack Visual Analytics Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND
# NONINFRINGEMENT. IN NO EVENT WILL THE LICENSOR OR OTHER CONTRIBUTORS
# BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF, OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# The QuantumBlack Visual Analytics Limited ("QuantumBlack") name and logo
# (either separately or in combination, "QuantumBlack Trademarks") are
# trademarks of QuantumBlack. The License does not grant you any right or
# license to the QuantumBlack Trademarks. You may not use the QuantumBlack
# Trademarks or any confusingly similar mark as a trademark for your product,
#     or use the QuantumBlack Trademarks in any other manner that might cause
# confusion in the marketplace, including but not limited to in advertising,
# on websites, or on software.
#
# See the License for the specific language governing permissions and
# limitations under the License.

import pyspark.sql.functions as f
from pyspark.sql import SparkSession
from pyspark.sql.types import IntegerType, StringType, StructField, StructType

from src.dmp.pipelines.dmp._01_aggregation.outlets.revenue_daily_level.agg_outlet_digipos import (
    _daily_aggregation,
    _remove_outlets_with_quality_issues,
)


class TestOutletsRevenueAggregation:
    def test_agg_outlet_digipos_daily(self, spark_session: SparkSession):
        schema_outlet_dim_dd = StructType(
            [
                StructField("outlet_id", StringType(), True),
                StructField("trx_date", StringType(), True),
                StructField("lattitude", StringType(), True),
                StructField("longitude", StringType(), True),
                StructField("tipe_outlet", StringType(), True),
                StructField("klasifikasi", StringType(), True),
                StructField("kabupaten", StringType(), True),
                StructField("kategori", StringType(), True),
                StructField("area", StringType(), True),
                StructField("regional", StringType(), True),
                StructField("tipe_lokasi", StringType(), True),
                StructField("jadwal_kunjungan", IntegerType(), True),
                StructField("total_rech", IntegerType(), True),
                StructField("total_trx_rech", IntegerType(), True),
                StructField("total_rev_package", IntegerType(), True),
                StructField("total_trx_package", IntegerType(), True),
                StructField("rev_package_akuisisi", IntegerType(), True),
                StructField("rev_package_voice", IntegerType(), True),
                StructField("rev_package_sms", IntegerType(), True),
                StructField("rev_package_bulk", IntegerType(), True),
                StructField("rev_package_fix", IntegerType(), True),
                StructField("rev_package_hvc", IntegerType(), True),
                StructField("rev_package_haji", IntegerType(), True),
                StructField("created_at", StringType(), True),
            ]
        )

        df_outlet = spark_session.createDataFrame(
            [
                # Case 1: Outlets with multiple lat/long
                (
                    "32010005820",
                    "20190101",
                    "-7.729209899902344",
                    "112.07933044433594",
                    "Warung",
                    "BRONZE",
                    "kabupaten_x",
                    "kategori_x",
                    "area_x",
                    "region_x",
                    "location_type_x",
                    2,
                    100,
                    200,
                    300,
                    400,
                    500,
                    600,
                    700,
                    800,
                    900,
                    450,
                    120,
                    "27-JUL-17",
                ),
                (
                    "32010005820",
                    "20190101",
                    "-5.729209899902344",
                    "112.07933044433594",
                    "Warung",
                    "BRONZE",
                    "kabupaten_x",
                    "kategori_x",
                    "area_x",
                    "region_x",
                    "location_type_x",
                    2,
                    100,
                    200,
                    300,
                    400,
                    500,
                    600,
                    700,
                    800,
                    900,
                    450,
                    120,
                    "27-JUL-17",
                ),
                # Case 2: Outlets with multiple outlet type
                (
                    "12010005820",
                    "20190101",
                    "-5.729209899902344",
                    "112.07933044433594",
                    "Warung",
                    "BRONZE",
                    "kabupaten_x",
                    "kategori_x",
                    "area_x",
                    "region_x",
                    "location_type_x",
                    2,
                    100,
                    200,
                    300,
                    400,
                    500,
                    600,
                    700,
                    800,
                    900,
                    450,
                    120,
                    "27-JUL-17",
                ),
                (
                    "12010005820",
                    "20190101",
                    "-5.729209899902344",
                    "112.07933044433594",
                    "Counter Pulsa",
                    "BRONZE",
                    "kabupaten_x",
                    "kategori_x",
                    "area_x",
                    "region_x",
                    "location_type_x",
                    2,
                    100,
                    200,
                    300,
                    400,
                    500,
                    600,
                    700,
                    800,
                    900,
                    450,
                    120,
                    "27-JUL-17",
                ),
                # Normal Cases
                (
                    "54630005820",
                    "20190101",
                    "-7.729209899902344",
                    "112.07933044433594",
                    "Warung",
                    "BRONZE",
                    "kabupaten_x",
                    "kategori_x",
                    "area_x",
                    "region_x",
                    "location_type_x",
                    2,
                    100,
                    200,
                    300,
                    400,
                    500,
                    600,
                    700,
                    800,
                    900,
                    450,
                    620,
                    "27-JUL-17",
                ),
                (
                    "54630005820",
                    "20190102",
                    "-7.729209899902344",
                    "112.07933044433594",
                    "Warung",
                    "GOLD",
                    "kabupaten_x",
                    "kategori_x",
                    "area_x",
                    "region_x",
                    "location_type_x",
                    2,
                    200,
                    300,
                    100,
                    500,
                    800,
                    100,
                    400,
                    100,
                    800,
                    350,
                    120,
                    "27-JUL-17",
                ),
                (
                    "54630005820",
                    "20190103",
                    "-7.729209899902344",
                    "112.07933044433594",
                    "Warung",
                    "PLATINUM",
                    "kabupaten_x",
                    "kategori_x",
                    "area_x",
                    "region_x",
                    "location_type_x",
                    2,
                    300,
                    400,
                    200,
                    600,
                    100,
                    200,
                    500,
                    200,
                    600,
                    450,
                    220,
                    "27-JUL-17",
                ),
                (
                    "54630005820",
                    "20190104",
                    "-7.729209899902344",
                    "112.07933044433594",
                    "Warung",
                    "BRONZE",
                    "kabupaten_x",
                    "kategori_x",
                    "area_x",
                    "region_x",
                    "location_type_x",
                    2,
                    400,
                    600,
                    100,
                    400,
                    500,
                    600,
                    700,
                    600,
                    200,
                    550,
                    120,
                    "27-JUL-17",
                ),
                (
                    "10000005820",
                    "20190101",
                    "-7.729209899902344",
                    "112.07933044433594",
                    "Warung",
                    "BRONZE",
                    "kabupaten_x",
                    "kategori_x",
                    "area_x",
                    "region_x",
                    "location_type_x",
                    2,
                    100,
                    200,
                    300,
                    400,
                    500,
                    600,
                    700,
                    800,
                    900,
                    450,
                    120,
                    "27-JUL-17",
                ),
            ],
            schema=schema_outlet_dim_dd,
        )

        df_outlet = df_outlet.coalesce(1)

        schema_digipos = StructType(
            [
                StructField("outlet_id", StringType(), True),
                StructField("no_rs", StringType(), True),
                StructField("created_at", StringType(), True),
            ]
        )

        df_digipos = spark_session.createDataFrame(
            [
                # Case 3: Outlet With outlet_id Starting With 6 (Personal Reseller)
                ("62010005820", "1235", "30-MAR-17"),
                # Case 4: Filter Out Outlets For Which 'no_rs' Has Multiple Outlet ID Mapping
                ("99999999990", "5678", "30-MAR-17"),
                ("88888888880", "5678", "30-MAR-17"),
                ("54630005820", "9999", "27-JUL-17"),
                ("10000005820", "1234", "27-JUL-17"),
                ("12010005820", "9876", "27-JUL-17"),
            ],
            schema=schema_digipos,
        )

        df_digipos = df_digipos.coalesce(1)
        df_result = _remove_outlets_with_quality_issues(df_outlet, df_digipos)

        df_outlet_digipos = _daily_aggregation(
            df_outlet,
            df_result["multiple_latlong"],
            df_result["multiple_type"],
            df_result["personal_resellers"],
            df_result["physical_vouchers"],
            df_result["no_rs_to_multiple_outlet"],
        )[0]

        df_outlet_digipos_stats = (
            df_outlet_digipos.withColumn(
                "trx_date", f.date_format(f.col("trx_date"), "YYYY-MM-dd")
            )
            .withColumn("created_at", f.date_format(f.col("created_at"), "YYYY-MM-dd"))
            .orderBy("outlet_id")
        )

        df_outlet_rs_msisdn_mapping = df_result["digipos_cleaned"].orderBy("outlet_id")

        out_list_digipos = [
            [
                i[0],
                i[1],
                i[2],
                i[3],
                i[4],
                i[5],
                i[6],
                i[7],
                i[8],
                i[9],
                i[10],
                i[11],
                i[12],
                i[13],
                i[14],
                i[15],
                i[16],
                i[17],
                i[18],
                i[19],
                i[20],
                i[21],
                i[22],
                i[23],
                i[24],
            ]
            for i in df_outlet_digipos_stats.collect()
        ]

        out_list_mapping = [
            [i[0], i[1], i[2]] for i in df_outlet_rs_msisdn_mapping.collect()
        ]

        assert out_list_digipos == [
            [
                "10000005820",
                "2019-01-01",
                "kabupaten_x",
                "kategori_x",
                "Warung",
                "location_type_x",
                "-7.729209899902344",
                "112.07933044433594",
                "2017-07-27",
                "area_x",
                2,
                "112.07933044433594|-7.729209899902344",
                "BRONZE",
                "region_x",
                100,
                200,
                300,
                400,
                500,
                600,
                700,
                800,
                900,
                450,
                120,
            ],
            [
                "54630005820",
                "2019-01-01",
                "kabupaten_x",
                "kategori_x",
                "Warung",
                "location_type_x",
                "-7.729209899902344",
                "112.07933044433594",
                "2017-07-27",
                "area_x",
                2,
                "112.07933044433594|-7.729209899902344",
                "BRONZE",
                "region_x",
                100,
                200,
                300,
                400,
                500,
                600,
                700,
                800,
                900,
                450,
                620,
            ],
            [
                "54630005820",
                "2019-01-02",
                "kabupaten_x",
                "kategori_x",
                "Warung",
                "location_type_x",
                "-7.729209899902344",
                "112.07933044433594",
                "2017-07-27",
                "area_x",
                2,
                "112.07933044433594|-7.729209899902344",
                "GOLD",
                "region_x",
                200,
                300,
                100,
                500,
                800,
                100,
                400,
                100,
                800,
                350,
                120,
            ],
            [
                "54630005820",
                "2019-01-03",
                "kabupaten_x",
                "kategori_x",
                "Warung",
                "location_type_x",
                "-7.729209899902344",
                "112.07933044433594",
                "2017-07-27",
                "area_x",
                2,
                "112.07933044433594|-7.729209899902344",
                "PLATINUM",
                "region_x",
                300,
                400,
                200,
                600,
                100,
                200,
                500,
                200,
                600,
                450,
                220,
            ],
            [
                "54630005820",
                "2019-01-04",
                "kabupaten_x",
                "kategori_x",
                "Warung",
                "location_type_x",
                "-7.729209899902344",
                "112.07933044433594",
                "2017-07-27",
                "area_x",
                2,
                "112.07933044433594|-7.729209899902344",
                "BRONZE",
                "region_x",
                400,
                600,
                100,
                400,
                500,
                600,
                700,
                600,
                200,
                550,
                120,
            ],
        ]

        assert out_list_mapping == [
            ["10000005820", "621234", "2017-07-27"],
            ["54630005820", "629999", "2017-07-27"],
        ]
