"""
Are you a model factory user? This part is for you...
----------------------------------------------------
The inlife campaigns are as numerous as the are repetitive.  This script
is to make them easier to generate. Because they are so very repetitive,
it's much easier to make a little generator  file and override things as
needed.

However, if you find yourself in a situation where there is a lot of if/
else branches or loops in the templates, maybe it's time to just abandon
the generator idea and do things old school.

Are you a curious DMP developer? This part is for you...
--------------------------------------------------------
We configure the model factory by building individual models,  each with
its own Kedro config.

Because inlife has **so many** campaigns, it 's easier for us to build a
script to generate campaigns, than it is to actually make them.  This is
that script.

So, you should never really see this script imported or used in the code
and it should only really be called by developers who are trying to make
campaign code. It should **not** be called by normal DMP code,  or in CI
pipelines, or in normal Kedro runs.
"""
from pathlib import Path

import attr
import jinja2
import yaml

CATALOG_TEMPLATE = """
# WARNING: Autogenerated file - consider editing and using inlife-generator script

{%- for table in tables %}

master{{loop.index0}}:
    type: src.dmp.io.spark_hive_dataset.SparkHiveDataSet
    database: dmp_remote
    table: {{table}}
{%- endfor %}

"""

PAI_TEMPLATE = """
# WARNING: Autogenerated file - consider editing and using inlife-generator script

PAI_RUN_NAME: {{name}}_t-learner
PAI_RUNS: hdfs:///data/landing/dmp_remote/model_factory/feature_selection/pai

"""

PARAMETERS_TEMPLATE = """
# WARNING: Autogenerated file - consider editing and using inlife-generator script

campaign_names:
{%- for camp in campaigns %}
    - "{{camp}}"
{%- endfor %}

# Target definition
use_case: "inlife"
modeling_approach: "t-learner"
# This means NULL means zero null revenue is missing revenue rows, which
# is basically a zero-revenue condition.
target_source:
       pai_workaround: 'coalesce(fea_revnew_tot_sum_01w, 0) - coalesce(fea_revnew_digital_tot_sum_01w, 0)'

train_offset_weeks: 1
target_window_weeks: 6

column_selection:
    required: []
    excluded: []
    exclude_dtype_prefix:
        - "string"
        - "array"
    exclude_suffix:
        - "_03w"
        - "_02m"
    exclude_prefix:
        - "fea_rev_"
        - "fea_revenue_"
        - "fea_handset_int"  # for fea_handset_int_, fea_handset_internal, etc
        - "fea_product_"
        - "fea_allowance_"
        - "fea_mobility_"

# specify PAI run_id to load selected features
# leave blank to train on all features
selected_features_run_id:

# Sampling: empty value disables sampling
n_rows_to_sample: 100_000
n_features_to_sample:

# Column names
feature_column_prefix: "fea_"
msisdn_column: "msisdn"
campaign_start_date_column: "start_date"
campaign_end_date_column: "end_date"
weekstart_column: "weekstart"
campaign_name_column: "campaign_name"
is_control_column: "is_control"
is_taker_column: "is_taker"

# Uplift modeling
n_features_to_select: 30
uplift_folds: 10
uplift_train: 0.5
uplift_iterations: 200
wrapper_resolution: 5
expose_wrapped_model: False

# Kedro/PAI settings
use_spark: True
pai_tags:
    - "inlife"
pai_campaign_name: "{{name}}"

# Plots labels
plot_labels:
    target_component_y_label: "Average component value"
    target_source_y_label: "ARPU"

# SHAP treatment vs control parameters
shap_treatment_vs_control:
    n_folds: 5
    n_iterations: 200
    train_frac: 0.8
    n_features: 15

# SHAP taker vs nontaker parameters
shap_taker_vs_nontaker:
    n_folds: 5
    n_iterations: 200
    train_frac: 0.8
    n_features: 15

"""


@attr.s
class Case:
    name = attr.ib()
    group_names = attr.ib()
    tables = attr.ib()


cases = [
    Case(
        "fg_lapser_part1_segment_1_myt",
        [
            "fg_lapser_part1_SEGMENT_1_MYT_control",
            "fg_lapser_part1_SEGMENT_1_MYT_target",
        ],
        ["4g_lapser_20200824"],
    ),
    Case(
        "fg_lapser_part1_segment_1_sms",
        [
            "fg_lapser_part1_SEGMENT_1_SMS_control",
            "fg_lapser_part1_SEGMENT_1_SMS_target",
        ],
        ["4g_lapser_20200824"],
    ),
    Case(
        "fg_lapser_part1_segment_3_myt",
        [
            "fg_lapser_part1_SEGMENT_3_MYT_control",
            "fg_lapser_part1_SEGMENT_3_MYT_target",
        ],
        ["4g_lapser_20200824"],
    ),
    Case(
        "hvb_lapser_b_decile_9",
        ["hvc_lapserB_decile_9_target", "hvc_lapserB_decile_9_control"],
        ["hvc_lapser_b_20200824"],
    ),
    Case(
        "ssm_hvc_lapser_a_lp5c_apr",
        ["SSM_HVC_Lapser_A_LP5C_Apr_control", "SSM_HVC_Lapser_A_LP5C_Apr"],
        ["hvc_lapser_a_20200824"],
    ),
    Case(
        "ssm_hvc_lapser_a_lp5d_apr",
        ["SSM_HVC_Lapser_A_LP5D_Apr_control", "SSM_HVC_Lapser_A_LP5D_Apr"],
        ["hvc_lapser_a_20200824"],
    ),
    Case(
        "ssm_hvc_lapser_a_sp5a_apr",
        ["SSM_HVC_Lapser_A_SP5A_Apr_control", "SSM_HVC_Lapser_A_SP5A_Apr"],
        ["hvc_lapser_a_20200824"],
    ),
    Case(
        "ssm_hvc_lapser_a_sp5b_apr",
        ["SSM_HVC_Lapser_A_SP5B_Apr_control", "SSM_HVC_Lapser_A_SP5B_Apr"],
        ["hvc_lapser_a_20200824"],
    ),
    Case(
        "ssm_hvc_lapser_a_sp5c_apr",
        ["SSM_HVC_Lapser_A_SP5C_Apr_control", "SSM_HVC_Lapser_A_SP5C_Apr"],
        ["hvc_lapser_a_20200824"],
    ),
    Case(
        "ssm_rgb_tipe_a_segment_a",
        ["SSM_RGB_Tipe_A_Segment_A_Control", "SSM_RGB_Tipe_A_Segment_A_Broadcast_Apr"],
        ["rgb_a_samples_20200824"],
    ),
    Case(
        "ssm_rgb_tipe_a_segment_b",
        ["SSM_RGB_Tipe_A_Segment_B_Control", "SSM_RGB_Tipe_A_Segment_B_Broadcast_Apr"],
        ["rgb_a_samples_20200824"],
    ),
    Case(
        "ssm_rgb_tipe_a_segment_c",
        ["SSM_RGB_Tipe_A_Segment_C_Control", "SSM_RGB_Tipe_A_Segment_C_Broadcast_Apr"],
        ["rgb_a_samples_20200824"],
    ),
    Case(
        "ssm_thrifty_2b",
        ["SSM_Thrifty_2b", "SSM_Thrifty_2b2d_LCG"],
        ["june_thrifty_20200824"],
    ),
    Case(
        "ssm_thrifty_2d",
        ["SSM_Thrifty_2d", "SSM_Thrifty_2b2d_LCG"],
        ["june_thrifty_20200824"],
    ),
    Case(
        "ssm_thrifty_2g",
        ["SSM_Thrifty_2g", "SSM_Thrifty_2g_LCG"],
        ["june_thrifty_20200824"],
    ),
    Case(
        "ssm_thrifty_3f",
        ["SSM_Thrifty_3f", "SSM_Thrifty_3d3h_LCG"],
        ["june_thrifty_20200824"],
    ),
    Case(
        "ssm_thrifty_3h",
        ["SSM_Thrifty_3h", "SSM_Thrifty_3d3h_LCG"],
        ["june_thrifty_20200824"],
    ),
    Case(
        "SSM_4GScaleUp8b_Path2Churn02_SMSApp",
        ["SSM_4GScaleUp8b_Path2Churn02_SMSApp", "control_path2churn_8b_scaleup"],
        ["june_4gscaleup_pathtochurn_20200824"],
    ),
    Case(
        "SSM_4GScaleUp4a_Path2Churn02_SMSApp",
        [
            "SSM_4GScaleUp4a_Path2Churn02_SMSApp",
            "SSM_4GScaleUp4a_Path2Churn02_SMSApp_LCG",
        ],
        ["june_4gscaleup_pathtochurn_20200824"],
    ),
    Case(
        "SSM_4GScaleUp1_Path2Churn02_SMSApp",
        [
            "SSM_4GScaleUp1_Path2Churn02_SMSApp",
            "SSM_4GScaleUp1_Path2Churn02_SMSApp_LCG",
        ],
        ["june_4gscaleup_pathtochurn_20200824"],
    ),
    Case(
        "SSM_4GScaleUp6a_Path2Churn02_SMSApp",
        [
            "SSM_4GScaleUp6a_Path2Churn02_SMSApp",
            "SSM_4GScaleUp6a_Path2Churn02_SMSApp_LCG",
        ],
        ["june_4gscaleup_pathtochurn_20200824"],
    ),
    Case(
        "SSM_4GScaleUp3a_Path2Churn02_SMSApp",
        [
            "SSM_4GScaleUp3a_Path2Churn02_SMSApp",
            "SSM_4GScaleUp3a_Path2Churn02_SMSApp_LCG",
        ],
        ["june_4gscaleup_pathtochurn_20200824"],
    ),
    Case(
        "SSM_4GScaleUp3b_Path2Churn08_4GBonus_SMSApp",
        [
            "SSM_4GScaleUp3b_Path2Churn08_4GBonus_SMSApp",
            "SSM_4GScaleUp3b_Path2Churn08_4GBonus_SMSApp_LCG",
        ],
        ["june_4gscaleup_pathtochurn_20200824"],
    ),
    Case(
        "SSM_4GScaleUp7a_Path2Churn02_SMSApp",
        [
            "SSM_4GScaleUp7a_Path2Churn02_SMSApp",
            "SSM_4GScaleUp7a_Path2Churn02_SMSApp_LCG",
        ],
        ["june_4gscaleup_pathtochurn_20200824"],
    ),
    Case(
        "SSM_4GScaleUp2_Path2Churn02_SMSApp",
        [
            "SSM_4GScaleUp2_Path2Churn02_SMSApp",
            "SSM_4GScaleUp2_Path2Churn02_SMSApp_LCG",
        ],
        ["june_4gscaleup_pathtochurn_20200824"],
    ),
    Case(
        "SSM_4GScaleUp5_Path2Churn08_4GBonus_SMSApp",
        [
            "SSM_4GScaleUp5_Path2Churn08_4GBonus_SMSApp",
            "SSM_4GScaleUp5_Path2Churn08_4GBonus_SMSApp_LCG",
        ],
        ["june_4gscaleup_pathtochurn_20200824"],
    ),
    Case(
        "AAGM_CMP_THRIFTY-2ND-SEG2_2A",
        ["AAGM_CMP_THRIFTY-2ND-SEG2_2A", "AAGM_CMP_THRIFTY-2ND-SEG2_LCG",],
        ["thrifty_jun_high_20201005_20201005"],
    ),
    Case(
        "AAGM_CMP_THRIFTY-2ND-SEG2_2C",
        ["AAGM_CMP_THRIFTY-2ND-SEG2_2C", "AAGM_CMP_THRIFTY-2ND-SEG2_LCG",],
        ["thrifty_jun_high_20201005_20201005"],
    ),
    Case(
        "AAGM_CMP_INLIFE-DISCHUNT-SEG4_4H-1",
        ["AAGM_CMP_INLIFE-DISCHUNT-SEG4_4H-1", "AAGM_CMP_INLIFE-DISCHUNT-SEG4_LCG",],
        ["disc_hunter_jun_high_20201005_20201005"],
    ),
    Case(
        "AAGM_CMP_INLIFE-DISCHUNT-SEG4_4I-1",
        ["AAGM_CMP_INLIFE-DISCHUNT-SEG4_4I-1", "AAGM_CMP_INLIFE-DISCHUNT-SEG4_LCG",],
        ["disc_hunter_jun_high_20201005_20201005"],
    ),
    Case(
        "AAGM_CMP_INLIFE-DISCHUNT-SEG4_4H_4I-1",
        [
            "AAGM_CMP_INLIFE-DISCHUNT-SEG4_4H-1",
            "AAGM_CMP_INLIFE-DISCHUNT-SEG4_4I-1",
            "AAGM_CMP_INLIFE-DISCHUNT-SEG4_LCG",
        ],
        ["disc_hunter_jun_high_20201005_20201005"],
    ),
    Case(
        "AAGM_CMP_INLIFE-DISCHUNT-SEG4_4A-1",
        ["AAGM_CMP_INLIFE-DISCHUNT-SEG4_4A-1", "AAGM_CMP_INLIFE-DISCHUNT-SEG4_LCG",],
        ["disc_hunter_jun_high_20201005_20201005"],
    ),
    Case(
        "AAGM_CMP_INLIFE-DISCHUNT-SEG4_4B-1",
        ["AAGM_CMP_INLIFE-DISCHUNT-SEG4_4B-1", "AAGM_CMP_INLIFE-DISCHUNT-SEG4_LCG",],
        ["disc_hunter_jun_high_20201005_20201005"],
    ),
    Case(
        "AAGM_CMP_INLIFE-DISCHUNT-SEG4_4C-1",
        ["AAGM_CMP_INLIFE-DISCHUNT-SEG4_4C-1", "AAGM_CMP_INLIFE-DISCHUNT-SEG4_LCG",],
        ["disc_hunter_jun_high_20201005_20201005"],
    ),
    Case(
        "AAGM_CMP_INLIFE-DISCHUNT-SEG4_4A_4B_4C-1",
        [
            "AAGM_CMP_INLIFE-DISCHUNT-SEG4_4A-1",
            "AAGM_CMP_INLIFE-DISCHUNT-SEG4_4B-1",
            "AAGM_CMP_INLIFE-DISCHUNT-SEG4_4C-1",
            "AAGM_CMP_INLIFE-DISCHUNT-SEG4_LCG",
        ],
        ["disc_hunter_jun_high_20201005_20201005"],
    ),
    Case(
        "AAGM_CMP_INLIFE-DISCHUNT-SEG4_4D-1",
        ["AAGM_CMP_INLIFE-DISCHUNT-SEG4_4D-1", "AAGM_CMP_INLIFE-DISCHUNT-SEG4_LCG",],
        ["disc_hunter_jun_high_20201005_20201005"],
    ),
    Case(
        "AAGM_CMP_INLIFE-DISCHUNT-SEG4_4E-1",
        ["AAGM_CMP_INLIFE-DISCHUNT-SEG4_4E-1", "AAGM_CMP_INLIFE-DISCHUNT-SEG4_LCG",],
        ["disc_hunter_jun_high_20201005_20201005"],
    ),
    Case(
        "AAGM_CMP_INLIFE-DISCHUNT-SEG4_4D_4E-1",
        [
            "AAGM_CMP_INLIFE-DISCHUNT-SEG4_4D-1",
            "AAGM_CMP_INLIFE-DISCHUNT-SEG4_4E-1",
            "AAGM_CMP_INLIFE-DISCHUNT-SEG4_LCG",
        ],
        ["disc_hunter_jun_high_20201005_20201005"],
    ),
]


if __name__ == "__main__":
    if not Path("generator.py").exists():
        raise FileNotFoundError(
            "Could not find **this python file**, suggesting you are running it in the wrong dir"
        )

    catalog_template = jinja2.Template(CATALOG_TEMPLATE)
    parameters_template = jinja2.Template(PARAMETERS_TEMPLATE)
    pai_template = jinja2.Template(PAI_TEMPLATE)

    for case in cases:
        base_path = Path(case.name)
        base_path.mkdir(exist_ok=True)

        catalog_yaml = base_path / "catalog.yml"
        rendered = catalog_template.render(tables=case.tables)
        yaml.safe_load(rendered)
        catalog_yaml.write_text(rendered)

        parameters_yaml = base_path / "parameters.yml"
        rendered = parameters_template.render(
            name=case.name, campaigns=case.group_names,
        )
        yaml.safe_load(rendered)
        parameters_yaml.write_text(rendered)

        pai_yaml = base_path / "pai.yml"
        rendered = pai_template.render(name=case.name)
        yaml.safe_load(rendered)
        pai_yaml.write_text(rendered)
